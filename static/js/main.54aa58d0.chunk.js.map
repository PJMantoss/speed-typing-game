{"version":3,"sources":["hooks/useWordGame.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["useWordGame","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","useEffect","setTimeout","time","endGame","trim","split","filter","word","length","countWords","handleChange","e","value","target","startGame","current","disabled","focus","Footer","id","src","alt","href","rel","App","onChange","ref","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAsDeA,MApDf,WACI,IADkB,EAEIC,mBAAS,IAFb,mBAEbC,EAFa,KAEPC,EAFO,OAGsBF,mBAFlB,GADJ,mBAGbG,EAHa,KAGEC,EAHF,OAIsBJ,oBAAS,GAJ/B,mBAIbK,EAJa,KAIEC,EAJF,OAKcN,mBAAS,GALvB,mBAKbO,EALa,KAKFC,EALE,KAMdC,EAAaC,iBAAO,MAe1BC,qBAAU,WAELN,GAAiBF,EAAgB,EAClCS,YAAW,WACTR,GAAiB,SAAAS,GAAI,OAAIA,EAAO,OAC/B,KACwB,IAAlBV,GACTW,MAGD,CAACX,EAAeE,IAGnB,IAUMS,EAAU,WACdR,GAAiB,GACjBE,EAjCiB,SAACP,GAKhB,OAJaA,EAAKc,OAAOC,MAAM,KAEJC,QAAO,SAAAC,GAAI,MAAc,KAATA,KAEtBC,OA4BVC,CAAWnB,KAG1B,MAAO,CAACQ,aAAYR,OAAMoB,aAzCL,SAACC,GAAO,IACpBC,EAASD,EAAEE,OAAXD,MACPrB,EAAQqB,IAuC8BlB,gBAAeF,gBAAesB,UAfpD,WAChBnB,GAAiB,GACjBJ,EAAQ,IACRM,EAAa,GACbJ,EArCsB,GAsCtBK,EAAWiB,QAAQC,UAAW,EAC9BlB,EAAWiB,QAAQE,SAS4DrB,c,KCjCpEsB,MAff,WACI,OACI,mCACI,4BAAG,yDACH,+CAEA,sBAAKC,GAAG,OAAR,UACI,6CACA,qBAAKC,IAAI,iDAAiDC,IAAI,SAC9D,uCAAS,mBAAGC,KAAK,+BAA+BT,OAAO,SAASU,IAAI,aAA3D,+BC6BVC,MApCf,WAAgB,IAAD,EASTpC,IAPFU,EAFW,EAEXA,WACAR,EAHW,EAGXA,KACAoB,EAJW,EAIXA,aACAhB,EALW,EAKXA,cACAF,EANW,EAMXA,cACAsB,EAPW,EAOXA,UACAlB,EARW,EAQXA,UAIF,OACE,gCACE,uDAEA,0BACI6B,SAAUf,EACVE,MAAOtB,EACP0B,UAAWtB,EACXgC,IAAK5B,IAGV,kDAAqBN,KAEpB,wBACImC,QAASb,EACTE,SAAUtB,EAFd,mBAKA,8CAAiBE,KACjB,cAAC,EAAD,QCxBSgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.54aa58d0.chunk.js","sourcesContent":["import {useState, useEffect, useRef} from 'react';\n\nfunction useWordGame(){\n    const STARTING_TIME = 6;\n  const [text, setText] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(STARTING_TIME);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n  const [wordCount, setWordCount] = useState(0);\n  const textBoxRef = useRef(null);\n  \n  const handleChange = (e) => {\n    const {value} = e.target;\n    setText(value);\n  }\n\n  const countWords = (text) => {\n    let wordsArr = text.trim().split(\" \");\n    \n    let filteredWords = wordsArr.filter(word => (word !== \"\"))\n\n      return filteredWords.length;\n  }\n\n  useEffect(() => {\n\n    if(isTimeRunning && timeRemaining > 0){\n      setTimeout(() => {\n        setTimeRemaining(time => time - 1);\n      }, 1000)\n    } else if (timeRemaining === 0){\n      endGame();\n    }\n\n  }, [timeRemaining, isTimeRunning]);\n\n  //Re-start Game\n  const startGame = () => {\n    setIsTimeRunning(true);\n    setText(\"\");\n    setWordCount(0);\n    setTimeRemaining(STARTING_TIME);\n    textBoxRef.current.disabled = false;\n    textBoxRef.current.focus();\n  }\n\n  //End Game\n  const endGame = () => {\n    setIsTimeRunning(false);\n    setWordCount(countWords(text));\n  }\n\n  return {textBoxRef, text, handleChange, isTimeRunning, timeRemaining, startGame, wordCount};\n}\n\nexport default useWordGame;","import React from 'react';\nimport './App.css';\n\nfunction Footer(){\n    return (\n        <footer>\n            <p><strong>Speed Typing Game</strong></p>\n            <p>Copyright 2020</p>\n\n            <div id=\"love\">\n                <span>Made With</span>\n                <img src=\"https://img.icons8.com/dusk/64/000000/like.png\" alt=\"love\"/> \n                <span>by <a href=\"https://github.com/PJMantoss\" target=\"_blank\" rel=\"noreferrer\">Mantoss</a></span>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport useWordGame from './hooks/useWordGame';\nimport Footer from './Footer';\nimport './App.css';\n\nfunction App() {\n  const {\n    textBoxRef, \n    text, \n    handleChange, \n    isTimeRunning, \n    timeRemaining, \n    startGame, \n    wordCount\n  } = useWordGame();\n\n  \n  return (\n    <div>\n      <h1>How fast do you type?</h1>\n\n      <textarea \n          onChange={handleChange} \n          value={text} \n          disabled={!isTimeRunning}\n          ref={textBoxRef}\n      />\n\n     <h4>Time remaining: {timeRemaining}</h4>\n\n      <button \n          onClick={startGame} \n          disabled={isTimeRunning}\n        >Start</button>\n  \n      <h1>Word Count: {wordCount}</h1>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}